=head1 NAME

XML::Toolkit::Walkthrough - quick walkthrough to get up and running
with XML::Toolkit

=head1 WHY XML::TOOLKIT?

If you have an XML document which you want to be able to manipulate as
objects (with Moose), then XML::Toolkit is for you.  XML::Toolkit
turns an XML document into an approximate representation of the schema
through a hierachy of classes.

=head1 THE WALKTHROUGH

The rest of this document walks you through the process of creating an
application with XML::Toolkit, pointing out crevasses and pitfalls for
the unwary developer. The XML document used as an example here is a
project file from Literature and Latte's Scrivener; XML::Toolkit is in
no way associated with Literature and Latte.

=head2 FIRST STEPS

Given an XML document, use the C<xmltk> command to generate the class
hierachy.

    $ xmltk generate --input axiom.scriv/axiom.scrivx --xmlns ''=Scrivener

Be aware of the root element of your XML document; it isn't given any
particularly special treatment, but you need to know what it's called.
In this case, it's 'ScrivenerProject'.

Also be aware of the XML namespace; in our example, we don't have one,
but you could just as easily have one (such as, say,
C<http://www.w3.org/1999/xhtml>) -- you need to be aware of the
namespace that you specify here.

Some Bourne shells will react badly to C<''=App>; in this case, add
a backslash before the equals, so: C<''\=App>.

C<xmltk generate> will automagically generate a large number of files
in the 'Scrivener' directory, one for each element that C<xmltk>
gleans from the XML document given to it.

    $ ls Scrivener/*
    Scrivener/ScrivenerProject.pm
    Scrivener/Binder.pm
    Scrivener/BinderItem.pm
    [... many other files elided ...]

Congratulations!  You've now got an OO representation of your XML
document.

=head2 CREATING AN APPLICATION

First, create a stub module, Scrivener.pm, than just defines a
package. This gets around unpleasantness later.

Next, create a small Perl script that C<use>s XML::Toolkit::App. You
may need to add the current directory to your C<@INC>.

    BEGIN { push @INC, '.' }
    
    use strict;
    use warnings;
    use diagnostics;
    $|++;
    
    use XML::Toolkit::App;
    use Scrivener;

The next thing you need to do is find out what your XML file is, then
feed it into XML::Toolkit::App. Once again, you need to be aware of
what your root element is called and what the namespace you specified
earlier is; in this case, we have no namespace, and the root element
is defined in Scrivener.

It's probably also good form to check that C<$xmlfile> is a file (and
exists, for that matter), otherwise error messages go everywhere.

    my ($xmlfile) = @ARGV unless scalar @ARGV == 1
    
    die "not a file: $xmlfile" unless -f $xmlfile;
    
    no strict;
    my $loader = XML::Toolkit::App->new(
        xmlns => { '' => Scrivener }
      )->loader;
    use strict;
    $loader->parse_file($xmlfile);

Go ahead, run it on your XML document. It won't bite.

That's as simple as it gets to import and parse your XML document.

Oh, you wanted to do something with it?  Okay, then.

=head2 TRAVERSING THE OBJECT HIERARCHY

We can use Data::Dumper to try to dump the hierarchy. Continuing on
from our last example,

    use Data::Dumper;
    
    print Dumper($loader->root_object);

Ewww.  That output is horribly ugly, and Perl is above horribly ugly.
So instead, let's write our own hierarchy dumper.

Now, a Scrivener document contains one Binder with lots of child
BinderItems; any BinderItem can be the root of a hierarchy of child
BinderItems.  Let's get the root Binder, then:

    my $binder = $loader->root_object->Binder_collection->[0];

Well, actually, that's silly. We don't have a collection of Binders.
So how do we fix this?

=head2 OPTIMIZING THE HIERARCHY

XML::Toolkit guesses that every element can be repeated and thus makes
them all collections; in many cases they don't need to be, and this
can be tweaked to do better data validation and to make your code
nicer.

BinderItem has a 'Title_collection' field which is defined as

    has 'Title_collection' => (
        isa         => 'ArrayRef[Scrivener::Title]',
        is          => 'ro', init_arg    => 'Titles',
        traits      => [qw(XML Array)],
        lazy        => 1,
        auto_deref  => 1,
        default     => sub { [] },
        handles    => { add_Title => ['push'] },     description => {
            LocalName => "Title",
            Prefix => "",
            node_type => "child",
            Name => "Title",
            NamespaceURI => "",
            sort_order => 7,
        },
    ); 

But there's an obvious problem with this. A BinderItem only has one
Title. To optimize this we convert Scrivener::BinderItem's
C<Title_collection> to just a C<Title>, by changing the C<isa>, C<is>,
and C<traits>.  We also need to attach a C<writer>.

    has 'Title' => (
        isa         => 'Scrivener::Title',
        is          => 'ro',
        traits      => [qw(XML)],
        writer      => 'add_Title',
        description => {
            LocalName => "Title",
            Prefix => "",
            node_type => "child",
            Name => "Title",
            NamespaceURI => "",
            sort_order => 7,
        },
    );

Thus, we have an optimized and sanity-checking adjustment to our
BinderItem.

=head2 LISTING BINDERITEMS

So, after optimizing ScrivenerProject's C<Binder>, I can do

    my $binder = $loader->root_object->Binder;
    foreach my $binderItem (@{ $binder->BinderItem_collection }) {
      print ref $binderItem, "\n";
    }

This spits a line of ref names at me.  That's a good start.

Let's try something a little fiddlier:

    foreach my $binderItem (@{ $binder->BinderItem_collection }) {
      print ref $binderItem, " ", $binderItem->Title->text, "\n";
    }

Oooh, that's better.

    Scrivener::BinderItem (type=DraftFolder) 
    Scrivener::BinderItem (type=ResearchFolder) Research
    Scrivener::BinderItem (type=TrashFolder) Trash
    Scrivener::BinderItem (type=Text) cxr

Or is it?  Have you noticed the issue here?  Perl sure did:

    Use of uninitialized value in print at scrivener.pl line 41

Adding a default field to C<Scrivener::Title>'s C<text> would be a
fairly safe assumption -- Scrivener allows one to have blank names in
the Title field -- but a better way would be to sanity check the
values returned and inject an empty string if it's not defined.

=head2 WHEELS WITHIN WHEELS: RECURSING BINDERITEMS

If you recall, we said that any BinderItem can be the root of a tree
of child BinderItems. Well, I lied. A Binder contains a BinderItem
collection. Each BinderItem can contain a Children, which contains a
BinderItem collection. Nonetheless, this doesn't change the code too
much.

    my $binder = $loader->root_object->Binder;
    foreach my $binderItem (@{ $binder->BinderItem_collection }) {
      &recurseBinderItem($binderItem);
    }
    
    sub recurseBinderItem {
      my ($binderItem, $level) = @_;
      $level = 0 unless defined $level;
      
      print "  "x$level,
          " (type=", $binderItem->Type,
          ", id=", defined($binderItem->ID) ?
              $binderItem->ID : "<ID>", ") ",
          defined($binderItem->Title->text) ?
              $binderItem->Title->text : "<no title>",
          "\n";
      if (defined($binderItem->Children)) {
        foreach my $childItem (@{ $binderItem->Children->BinderItem_collection }) {
          &recurseBinderItem($childItem, $level+1);
        }
      }
    }

You could also easily add things such as sanity checks and other such
niceties to this; not listing the contents of BinderItems with type
TrashFolder is one such easy one. Before the print, simply add
something like

    return if ($binderItem->Type eq "TrashFolder");

It's equally straightforward to only list things that have a certain
flag set or (given a creation or modification time) were only modified
or created before or after a certain point. There are a myriad of
possibilities from here.
    
=head2 NEXT STEPS

And there we have it, a quick tutorial on how to create a reasonably
complex reader using a real-world XML dataset.

From here, it's probably worthwhile having a look at the class
definitions in more detail to see if you can pick up anything obvious
or obscure. Building applications to go the other way, given an
XML::Toolkit, is reasonably straightforward, and the bare bones are
covered in the documentation for XML::Toolkit itself.

=head1 AUTHOR

This walkthrough was nurtured from random bit mutations by Jashank
Jeremy (jashank@rulingia.com). Much was gleaned from discussions with
Chris Prather (chris@prather.org) and Jesse Luehrs (doy@cpan.org) and
the occasional camel-shaped glyphs scattered throughout the code.

=head1 LICENCE

Copyright (c) 2012 Jashank Jeremy.

This software is free.  It is licensed under the same terms as Perl itself.

=cut
